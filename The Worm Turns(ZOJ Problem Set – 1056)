Worm is an old computer game. There are many versions, but all involve maneuvering a "worm" around the screen, trying to avoid running the worm into itself or an obstacle.

We'll simulate a very simplified version here. The game will be played on a 50 x 50 board, numbered so that the square at the upper left is numbered (1, 1). The worm is initially a string of 20 connected squares. Connected squares are adjacent horizontally or vertically. The worm starts stretched out horizontally in positions (25, 11) through (25, 30), with the head of the worm at (25, 30). The worm can move either East (E), West (W), North (N) or South (S), but will never move back on itself. So, in the initial position, a W move is not possible. Thus the only two squares occupied by the worm that change in any move are its head and tail. Note that the head of the worm can move to the square just vacated by the worm's tail.

You will be given a series of moves and will simulate the moves until either the worm runs into itself, the worm runs off the board, or the worm successfully negotiates its list of moves. In the first two cases you should ignore the remaining moves in the list.

Input

There will be multiple problems instances. The input for each problem instance will be on two lines. The first line is an integer n (<100) indicating the number of moves to follow. (A value of n = 0 indicates end of input.) The next line contains n characters (either E, W, N or S), with no spaces separating the letters, indicating the sequence of moves.

Output

Generate one line of output for each problem instance. The output line should be one of the follow three:

The worm ran into itself on move m.
The worm ran off the board on move m.
The worm successfully made all m moves.

Where m is for you to determine and the first move is move 1.

运行样例：

输入

18
NWWWWWWWWWWSESSSWS
20
SSSWWNENNNNNWWWWSSSS
30
EEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
13
SWWWWWWWWWNEE
0

输出

The worm successfully made all 18 moves.
The worm ran into itself on move 9.
The worm ran off the board on move 21.
The worm successfully made all 13 moves.
参考源码：

#include <stdio.h>
#define WORM_LENGTH 20

int main()
{
    short h[WORM_LENGTH], v[WORM_LENGTH];                  // 用于记录虫子每一节的位置，(v[0], h[0])是头部
    short newHead_v, newHead_h;                            // 移动一步后头部的新位置
    int i, j, steps;
    int ranIntoItself, ranOffBoard;
    char moves[1000];

    scanf("%d", &steps);                                   // 读入每个测试用例要移动的步数
    while (steps != 0)
    {
        scanf("%s", moves);                                // 读入移动方向字符串

        // 虫子的初始位置
        for (i = 0; i < WORM_LENGTH; i++)
        {
             h[i] = 30 - i;
             v[i] = 25;
        }

        ranIntoItself = ranOffBoard = 0;
        for (i = 0; i < steps; i++)
        {
            // 计算移动一步后头部的位置
            newHead_h = h[0];
            newHead_v = v[0];
            switch (moves[i])
            {
            case 'E':
                newHead_h++;
                break;
            case 'S':
                newHead_v++;
                break;
            case 'W':
                newHead_h--;
                break;
            case 'N':
                newHead_v--;
                break;
            }

            // 判断是否碰到自己的身体
            for (j = 1; j < WORM_LENGTH - 1; j++)          // 由于移动后尾部位置已前移一格，所以是WORM_LENGTH - 1
                if (newHead_h == h[j] && newHead_v == v[j])
                {
                    ranIntoItself = 1;
                    break;
                }

            // 判断是否碰到边缘
            if (newHead_h == 0 || newHead_h == 51 || newHead_v == 0 || newHead_v == 51)
                ranOffBoard = 1;

            if (ranIntoItself || ranOffBoard)
                break;

            // 移动虫子除头部后的几节
            for (j = WORM_LENGTH - 1; j > 0; j--)
            {
                 h[j] = h[j - 1];
                 v[j] = v[j - 1];
            }
            h[0] = newHead_h;
            v[0] = newHead_v;
        }

        // 输出移动后的状态
        if (ranIntoItself)
            printf("The worm ran into itself on move %d\n", i + 1);
        else if (ranOffBoard)
            printf("The worm ran off the board on move %d\n", i + 1);
        else
            printf("The worm successfully made all %d moves\n", steps);

       // 继续读下一字符串
        scanf("%d", &steps);
    }

    return 0;
}
