支持四则运算、带括号。原理是利用栈生成了二叉树；而二叉树的后序遍历结果等同于算术表达式的后缀表示（逆波兰式）。

(function() {
    Array.prototype.top = function() {
        return this[this.length - 1];
    };
    var arithmetic = function(math) {
        /**
         * @type {Array}
         * [] = {
         *   data,
         *   lchild,
         *   rchild
         * }
         */
        var binTree = [],
            root = 0,
            result;

        var init = function() {
            var i,
                j,
                temp,
                arr = math.split(''),
                length = arr.length,
                opnd = [],
                optr = [],
                isAfterNumber = 0;

            for (i = 0, j = 0; i < length; i++) {
                switch (arr[i]) {
                    case '+':
                    case '-':
                        while (/[-+*/]/.test(optr.top())) {
                            binTree.push({
                                data: optr.pop(),
                                rchild: opnd.pop(),
                                lchild: opnd.pop()
                            });
                            opnd.push(j++);
                        }
                        optr.push(arr[i]);
                        isAfterNumber = 0;
                        break;
                    case '*':
                    case '/':
                        if (/[*/]/.test(optr.top())) {
                            binTree.push({
                                data: optr.pop(),
                                rchild: opnd.pop(),
                                lchild: opnd.pop()
                            });
                            opnd.push(j++);
                        }
                        optr.push(arr[i]);
                        isAfterNumber = 0;
                        break;
                    case '(':
                        optr.push(arr[i]);
                        isAfterNumber = 0;
                        break;
                    case ')':
                        while (/[-+*/]/.test(optr.top())) {
                            binTree.push({
                                data: optr.pop(),
                                rchild: opnd.pop(),
                                lchild: opnd.pop()
                            });
                            opnd.push(j++);
                        }
                        optr.pop();
                        isAfterNumber = 0;
                        break;
                    default:
                        if (isAfterNumber) {
                            temp = binTree.pop();
                            temp.data += arr[i];
                            binTree.push(temp);
                        }
                        else {
                            binTree.push({
                                data: arr[i],
                                lchild: null,
                                rchild: null
                            });
                            opnd.push(j++);
                            isAfterNumber = 1;
                        }
                }
            }
            while (optr.length) {
                binTree.push({
                    data: optr.pop(),
                    rchild: opnd.pop(),
                    lchild: opnd.pop()
                });
                opnd.push(j++);
            }
            root = j - 1;
        };
        var calc = function(n) {
            var node = binTree[n];

            if (node) {
                if (!node.lchild && !node.rchild) {
                    return node.data;
                }

                return op(calc(node.rchild), calc(node.lchild), node.data);
            }

            return 0;
        };
        var op = function(a, b, op) {
            switch (op) {
                case '+':
                    return Number(b) + Number(a);
                case '-':
                    return b - a;
                case '*':
                    return b * a;
                case '/':
                    return b / a;
            }
        };

        init();
        result = calc(root);
        // console.log(binTree);
        console.log(result);
    };
    arithmetic('1-22+3-(1*2+3/1)+20.1*6/6*8');
})();
